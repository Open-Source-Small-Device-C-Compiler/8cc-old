#!/bin/bash

fail=0

./tests || fail=$((fail+1))

runtest() {
    /bin/echo -En "  $2 ... "
    echo "main() {$2}" | ./8cc - tmp$$.o
    gcc -o tmp$$ tmp$$.o
    local result="`./tmp$$`"
    if [ "$result" = "$1" ]; then
	echo $1
    else
	echo "NG ($result)"
	fail=$((fail+1))
    fi
}

#
# Basic tests
#
/bin/echo -e '\nBasic tests...'
runtest 'Hello, world!' 'printf("Hello, world!");'
runtest 'Hello, world!' 'printf("Hello, %s", "world!");'
runtest '12.34 56.78 42' 'printf("%2.2f %2.2f %d", 12.34, 56.78, 42);'
runtest '3' 'int i=3; printf("%d", i);'
runtest '6' 'int i=3; int j=0; j=i+3; printf("%d", j);'
runtest '50' 'int i=atoi("50"); int j = i; printf("%d", j);'
runtest '15' 'int i=3; int j=i+5+7; printf("%d", j);'
runtest '-5' 'int i=3; int j=5-i-7; printf("%d", j);'
runtest '0' 'int i=3; int j=5-i-7; printf("%d", j+5);'
runtest '0' 'int i=3; int j=5-i-7; printf("%d", j+5);'

#
# Operator precedences
#
/bin/echo -e '\nOperator precedences...'
runtest '10' 'int i=3; int j=1+i*3; printf("%d", j);'
runtest '5' 'int i=9; int j=1+i/3+9/i; printf("%d", j);'

#
# Assignment
#
/bin/echo -e '\nAssignment...'
runtest '3' 'int i=3; int j=i; printf("%d", j);'

#
# Comma operator
#
/bin/echo -e '\nComma operator...'
runtest '321' 'int i=3; while (i) printf("%d", i), i=i-1;'

#
# Parenthesized operator
#
/bin/echo -e '\nParenthesized operator...'
runtest '25' 'int i=2; int j=(i+3)*5; printf("%d", j);'

#
# "if" statement
#
/bin/echo -e '\nif statement...'
runtest 'true'  'int i=1; if (i) { printf("true"); } else { printf("false"); }'
runtest 'false' 'int i=0; if (i) { printf("true"); } else { printf("false"); }'
runtest 'true'  'int i=1; if (i)   printf("true");   else   printf("false");'

#
# "while" statement
#
/bin/echo -e '\nwhile statement...'
runtest '54321a' 'int i=5; while (i) { printf("%d", i); i=i-1; } printf("a");'
runtest '54321a' 'int i=5; while (i)   printf("%d", i), i=i-1;   printf("a");'

#
# "for" statement
#
/bin/echo -e '\nfor statement...'
runtest '321' 'int i=0; for (i=3;i;i=i-1) { printf("%d", i); }'
runtest '321' 'int i=0; for (i=3;i;i=i-1)   printf("%d", i);'

#
# "do" statement
#
/bin/echo -e '\ndo statement...'
runtest '321' 'int i=3; do { printf("%d", i); i=i-1;} while (i);'
runtest '321' 'int i=3; do   printf("%d", i), i=i-1;  while (i);'

#
# "==" operator
#
/bin/echo -e '\n== operator...'
runtest '1' 'int i=5; int j=5; int k=i==j; printf("%d", k);'
runtest '0' 'int i=3; int j=5; int k=i==j; printf("%d", k);'
runtest 'true'  'int i=5; int j=5; if (i==j) { printf("true"); } else { printf("false"); }'
runtest 'false' 'int i=3; int j=5; if (i==j) { printf("true"); } else { printf("false"); }'

#
# "break" and "continue"
#
/bin/echo -e '\nbreak and continue...'
runtest 'bar'  'int i=1; while (1) { if (i) { break; } printf("foo"); } printf("bar");'
runtest 'aac'  'int i=2; while (i) { if (i) { printf("a"); i=i-1; continue; } printf("b"); } printf("c");'
runtest '32a'  'int i=0; for (i=3;i;i=i-1) { printf("%d", i); if (i==2) { break; } } printf("a");'
runtest '321a' 'int i=0; for (i=3;i;i) { if (i) { printf("%d", i); i=i-1; continue; } } printf("a");'

#
# "goto" statement
#
/bin/echo -e '\ngoto statement...'
runtest 'acbd' 'A: printf("a"); goto C; B: printf("b"); goto D; C: printf("c"); goto B; D: printf("d");'

rm -f tmp$$ tmp$$.o
echo
if [ $fail -gt 0 ]; then
    echo "Test failure(s): $fail";
else
    echo OK
fi
